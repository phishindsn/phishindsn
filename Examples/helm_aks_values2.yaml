datadog:
  apiKey: <DATADOG_API_KEY>
  appKey: <DATADOG_APP_KEY>
  # If not using secrets, then use apiKey and appKey instead
  # apiKeyExistingSecret: <DATADOG_API_KEY_SECRET>
  # appKeyExistingSecret: <DATADOG_APP_KEY_SECRET>
  site: us3.datadoghq.com
  clusterName: <cluster name>

  # kubelet configuration
  kubelet:
    tlsVerify:  false

  processAgent:
    enabled: true
    processCollection: true

  orchestratorExplorer:
    enabled: true

  logs:
    enabled: true
    containerCollectAll: true

  networkMonitoring:
    enabled: true

providers:
  aks:
    enabled: true

# https://docs.datadoghq.com/agent/faq/rbac-for-dca-running-on-aks-with-helm/#pagetitle
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:healthz
rules:
- nonResourceURLs:
  - /healthz
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:healthz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:healthz
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:authenticated
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:unauthenticated